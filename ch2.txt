http://pdf.th7.cn/down/files/1502/Practical%20Object-Oriented%20Design%20in%20Ruby.pdf
CHAPTER 2
Designing Classes with a Single Responsibility


1) Designing Classes with a Single Responsibility 15
The MESSAGE is the foundation of an OO system but the CLASS is the 
most visible part of its structure.
Start SIMPLE - obtain what is needed now with an eye towards facilitating later (inevitable) changes
Standing targets will move



2) Deciding What Belongs in a Class 16
"Get organizized" where to put the code?

2a) Grouping Methods into Classes 16
Methods are defined in class & classes can "box in" & constrain imagination
Design is the art of preserving changeability (for actionability)

2b) Organizing Code to Allow for Easy Changes 16
Easily changeable code = "Children should be polite" Easier said than done
Code that's easy to change:
1) Changes have no unexpected side effects
2) Small changes in requirements require correspondingly small changes in code
3) Existing code is easy to reuse
4) An easy way to make change is to add code that itself is easy to change
Code should be T.R.U.E.:
1) Transparent
2) Reasonable
3) Useable
4) Exemplary
Step 1 to TRUE code is making sure each class has a single, well-defined responsibility



3) Creating Classes That Have a Single Responsibility 17
"A class should do the smallest possible useful thing; that is, it should have a single responsibility."

3a) An Example Application: Bicycles and Gears 17
Small gears: easy to pedal, not very fast
Large gears: harder to pedal, get you moving with more speed
Gears control wheel rotation per pedal rotation
Small gears: pedal rotates many times per wheel rotation
Large gears: pedal rotates fewer times; wheel rotates more per pedal rotation
Comparisons of gears done by RATIO of the number of teeth
(see ch2a_script.rb)
NOTE: there is no need to make a "bicycle" class.
The behavior of the gears does affect the speed of the bicycle,
but it is the gear chainrings, cogs and ratios that have
BOTH DATA AND BEHAVIOR.
(see ch2b_Gear_class.rb)
Gear class methods: chainring, cog and ratio
NOTE: "Inheritance" - Gear is a subclass of "Object" in Ruby and inherits many other methods from class:Object
(see ch6 - acquiring behavior through inheritance)
(see ch2c_Gear.wheel_class.rb)
Initialize variables have changed and old method does not work now, but it's so small it can be ignored for now.

3b) Why Single Responsibility Matters 21
Minimal entanglements in the program and within each class

3c) Determining If a Class Has a Single Responsibility 22
COHESION: Can you describe a class with one sentence without "and" or "or"?
The Single Responsibility Principle (SRP) has its roots in
Rebecca Wirfs-Brock and Brian Wilkerson’s idea of
Responsibility-Driven Design (RDD)
Everything in a class be related to it's purpose

3d) Determining When to Make Design Decisions 22
Resist making design decisions prematurely
Cost-effectiveness of waiting for more information



4) Writing Code That Embraces Change 24
How to arrange the code so that the Class and methods will be easy to change?

4a) Depend on Behavior, Not Data 24
Behavior is captured in methods and invoked by sending messages.
With single responsibility classes, every tiny bit of behavior lives in one place and only one place
D.R.Y. Don't Repeat Yourself
Data is held in instance variables - from simple to complex
Data is accessed two ways:
1) refer directly to instance variable, or,
2) wrap the instance in an accessor method
__Hide Instance Variables
(see ch2d_road_to_ruin.rb)
Use "attr_reader" to create the encapsulating methods
(see ch2e_attr.rb)
WRAPPERS - change data to behavior!!!!
Two issues:
1) Visibility - Pulic vs. Private (see ch.4 creating flexible interfaces)
2) Abstraction: blurry distinction between objects and data
__Hide Data Structures
Complicated data structres are as bad if not worse than being attached to an instance variable
(see ch2f_obscuring.rb)
References to complicated data structures are LEAKY
they escape encapsulation and insinuate themselves throughout the code
This is not D.R.Y.
The knowledge that rims are at [0] and tires at [1] should not be duplicated - just known in one place
Use Ruby to spearate structure from meaning
(see ch2_revealing.rb)
"The official Ruby documentation (http://ruby-doc.org/core/classes/Struct.html)
defines Struct as “a convenient way to bundle a number of attributes together, using
accessor methods, without having to write an explicit class.” This is exactly what
wheelify does; it creates little lightweight objects that respond to rim and tire."
"wheelify" trades indexing into a structure for sending messages to an object;
it isolates messy structural info and DRYs out the code
THIS MAKES THE CLASS MORE TOLERANT OF CHANGE

4b) Enforce Single Responsibility Everywhere 29
Create classes with single responsibilities
__Extract Extra Responsibilities From Methods\
Methods, like classes, should have single responsibility.
ask questions about what they do 
and try to answer them in one sentence
(see ch2h_diameters.rb)
Refactoring for single responsibility is needed/beneficial when the long term design goals are not clear
Benefits
1) Expose previously hidden qualities
2) Avoid the need for comments
3) Encourage reuse
4) Are easy to move to another class
__Isolate Extra Responsibilities in Classes
Any decisions or commitments made in advance of explicit requirements are just a guess
(see ch2i.rb)
Do not allow extraneous responsibilities to leak into your class.



5) Finally, the Real Wheel 33
(see ch2j_wheel.rb)



6) Summary 34
"The path to changeable and maintainable object-oriented software begins with classes
that have a single responsibility. Classes that do one thing isolate that thing from the
rest of your application. This isolation allows change without consequence and reuse
without duplication."


