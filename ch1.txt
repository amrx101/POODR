Chapter 1

1) Object-Oriented Design 1
Procedural design vs. object-oriented design
List of instructions vs. objects passing messages back and forth (setters & getters)
O.O.D. = Object Oriented Design
When to do it and how to judge it?

2) In Praise of Design 2
what is the purpose of the program?
what goals does it service?
how to achieve those goals elegantly and effectively considering time and cost.

3) The Problem Design Solves 2
It's easy to keep plates spinning when friction and gravity aren't a concern.
Note: friction and gravity are always a part of the world we live and program in.
Designing and producing software while anticipating and allowing for inevitable changes

4) Why Change Is Hard 3
objects, the messages that pass between them and the resulting dependencies.
What and how does the sender know to get which messages to which receivers?
How to manage these dependencies?
Design: arranging dependencies to accomodate and tolerate change

5) A Practical Definition of Design 4
Design: the art of arranging code
Two components of any design challenge/problem:
1) code for todays feature
2) code that is amenable to tomorrows' changes
Design alternative, costs/benefits, timeframe
Practical Design doesn't anticipate specific changes.
Practical Design accepts that some things will inevitably change.
Practical Deisgn preserves options for accomodating unforseeable changes.
The purpose of Practical Design is to allow you to do design later.
A primary goal is to REDUCE THE COST OF CHANGE

6) The Tools of Design 4
Principles and Pattern are the tools of OOD
Not a fixed set of rules.
A journey along a branching path.
Sometimes earlier choices close off options.
Sometimes they open access to others.

7) Design Principles 5
S.O.L.I.D. = 
Single responsibility
Open/closed
Liskov substitution
Interface segregation
Dependency inversion
Term coined by Michael Feathers
Popularized by Robert Martin
Liskov Substitution:
http://www.oodesign.com/liskov-s-substitution-principle.html
http://stackoverflow.com/questions/56860/what-is-the-liskov-substitution-principle
https://en.wikipedia.org/wiki/Barbara_Liskov
Also: D.R.Y = Don't Repeat Yourself
per Andy Hunt and Dave Thomas
Also: Law of Demeter
from the Northeastern University Demeter project
https://en.wikipedia.org/wiki/Law_of_Demeter
Each unit should have only limited knowledge about other units: only units "closely" related to the current unit.
Each unit should only talk to its friends; don't talk to strangers.
Only talk to your immediate friends.
How to quantify the effectiveness of OOD?
"They took object-oriented applications and tried to quantify the code. They named and measured
things like the overall size of classes, the entanglements that classes have with one
another, the depth and breadth of inheritance hierarchies, and the number of methods
that get invoked as a result of any message sent. They picked code arrangements they
thought might matter, devised formulas to count them, and then correlated the resulting
metrics to the quality of the enclosing applications. Their research shows a definite
correlation between use of these techniques and high-quality code."
"A metrics suite for object-oriented design":
http://dspace.mit.edu/bitstream/handle/1721.1/49292/towardsmetricssu00chid.pdf
"A Validation of Object-Oriented Design Metrics as Quality Indicators":
https://www.cs.umd.edu/~basili/publications/technical/T102.pdf
"Principal Components of Orthogonal Object-Oriented Metrics":
http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=CB520F14993302E2669C6BD3F4C0AC90?doi=10.1.1.95.6760&rep=rep1&type=pdf

8) Design Patterns 6
"Gang of Four" Design patterns: http://www.uml.org.cn/c++/pdf/DesignPatterns.pdf
Erich Gamma, Richard Helm, Ralph Johnson, and Jon Vlissides
"“simple and elegant solutions to specific problems in object-oriented software
design” that you can use to “make your own designs more flexible, modular, reusable
and understandable.”"
Don't abuse the patterns. Use them appropriately.

9) The Act of Design 7
Software is like custom furniture: principles and patterns are like woodworking tools.
Knowing how you want the software to look doesn't make it build itself.
The end result reflects upon the programmers experience with using the tools.

10) How Design Fails 7
Too little design and too much design.
Instead try just enough design just in time:
It's a process of discovery
Requires a feedback loop with customers needs and review of goals.
AGILE:
http://agilemanifesto.org/principles.html

11) When to Design 8
Show software sooner than later
build in tiny increments
collaborate w/customer
iterate towards integration of OOd functions with goals
Avoid B.U.F.D. Big Up Front Design; but don't avoid design altogether!!!

12) Judging Design 10
Don't judge by S.L.O.C. Source Lines Of Code
A better metric of "cost per feature over time" isn't as easy to calculate as SLOC
but Agile aims for better features.
"Technical debt" - making something that works now as opposed to works great tomorrow is
a compromise you will face. Don't let designing keep you from delivering software!

13)A Brief Introduction to Object-Oriented Programming 11
Object oriented applications are made up of objects and the messages that pass between them.

14) Procedural Languages 12
chasm between data and behavior

15) Object-Oriented Languages 12
data and behavior combined into an object
"Objects have behavior and may contain data, data to which they alone control access.
Objects invoke one another’s behavior by sending each other messages."

Summary 14

