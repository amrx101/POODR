http://pdf.th7.cn/down/files/1502/Practical%20Object-Oriented%20Design%20in%20Ruby.pdf
CHAPTER 4
Creating Flexible Interfaces


1) Creating Flexible Interfaces 59
As important as classes are to design, the application is better
described as the sum of its MESSAGES rather than its CLASSES. It is made
up of classes, but defined by the messages which pass between objects.
Design deals with WHAT objects "know" (their RESPONSIBILITIES), as well as
WHO objects know (their DEPENDENCIS) and HOW they talk to one another.
The conversation between objects takes place using their INTERFACES.
How then to create flexible interfaces that allow applications to grow and change?



2) Understanding Interfaces 59
If messages left trails - what would the map of your application look like?
A woven mat? ...each object conneced to every other?
A set of islands? ...with bridges between them?
The former is too difficult to re-use, each object exposing too much of itself.
The former objects and methods REVEAL TOO MUCH to each other.
The latter are more portable, objects can be extracted easily from the whole.
The problem is not what each class does (e.g. dependency injection or
single responsibility), but what it reveals.
The exposed methods comprise the class's PUBLIC INTERFACE.
Classes implement methods, some are intended to be used by others and these are
the methods which make up the public interface.
Another kind of 'interface' spans across classes and is independent of any
single class (the set of messages define the interface - a 'virtual' class - see ch.5)
BUT the rest of this chapter will ask of methods within a class:
HOW and WHAT to expose to others?



3) Defining Interfaces 61
RESTAURANT KITCHEN METAPHOR: The PUBLIC interface is what customers are
expected to use - they aren't supposed to go in the kitchen and stir the soup!
PUBLIC vs PROVATE interface, e.g.
The menu is the customers public interface.
The kitchen is the private and off-limits.
Things happening within the kitchen are "invisible" to the customer.
Using a menu lets each customer ask for WHAT they want
without having to know HOW to make it.
THINK of each class like the kitchen - it exists to fulfill a single
responsibility BUT implements many methods.
These methods may vary in SCALE and GRANULARITY and range from
BROAD, GENERAL methods to TINY UTILITY methods. BROAD methods can
expose the main responsibility of the class, TINY utility methods
are usually meant to ONLY be used internally - the former PUBLIC, the
latter: PRIVATE.


3a) Public Interfaces 62
The methods which make up the public interface of a class comprise the
face the class presents to the world. These methods:
1) Reveal the classes primary responsibility
2) Are expected to be invoked by others
3) Will not change on a whim
4) Are SAFE for others to depend on
5) Are thoroughly DOCUMENTED in the TESTS.


3b) Private Interfaces 62
All other methods in the class are part of the classes private interface. They:
1) Handle implementation details
2) Are not expected to be sent by other objects
3) Can change for ANY reason whatsoever
4) Are UNSAFE for others to depend upon
5) May NOT be referenced in the tests.


3c) Responsibilities, Dependencies, and Interfaces 62
Review Ch2: Designing Classes with a Single Responsibility.
Creating classes with a single PURPOSE & the things it does
(its responsibilities) allows it to fulfill that purpose. There is
a correspondence between PUBLIC methods and these responsibilities.
Review Ch3: Managing Dependencies. A class should depend ONLY on classes
which change less often that it does. NOW that every class has PUBLIC and PRIVATE parts,
depending on less changeable things applies to methods within a class.
PUBLIC = STABLE, DEPENDABLE
PRIVATE = CHANGEABLE, SUBJECT TO CHANGE



4) Finding the Public Interface 63
No cut-and-dried rules.
Design goal: retain maximum future flexibility while writing only enough
code to meet todays requirements.
Ideally - reduce the cost of unanticipated change; bad interfaces raise this cost.


4a) An Example Application: Bicycle Touring Company 63
FastFeet offers road and mountain bike trips
Each trip follows a specific route and is offered several or one times a year.
Each trip has a maximum number of customers at a time.
Each trip requires a specific number of guides who double as mechanics.
Each trip rated according to its aerobic and technical difficulty.
Customers have an aerobic fitness level and a technical skill level to determine
if the trip is right for them.
Customers may rent bikes or brings their own.
FastFeet has a small inventory of bikes and shares a pool of bikes from
local bike rental shops.
USE CASE: A customer, in order to choose a trip, wants to see a list of
available trips of appropriare difficulty, on a specific date, where rental
bikes are available.


4b) Constructing an Intention 64
DOMAIN OBJECTS (nouns in the application description) which have both
DATA and BEHAVIOR are obvious - they are persistent BUT they need not be at the
center of DESIGN. INSTEAD think of the MESSAGES which pass between DOMAIN OBJECTS.
What is your intention with the application in regards to BOTH the OBJECTS and
the MESSAGES? How will the use case be satisfied?


4c) Using Sequence Diagrams 65
U.M.L. - UNIFIED MODELING LANGUAGE
i.e. SEQUENCE DIAGRAMS modeling the domain objects and the messages that get sent between them.
Instead of deciding on a class and figuring out its responsibilities,
decide which messages need to be sent and figure out where to send them.
MESSAGE-BASED DESIGN (not class-based design).
Not: "I know I need this class, what should it do"
INSTEAD: "I NEED TO SEND THIS MESSAGE, WHO SHOULD RESPOND TO IT?"
"You don''t send messages because you have objects, you have objects
because you send mesages"
e.g. "Customer" should send the "suitable_trips?" message but
"Trips" shouldn't get the message. To find out who should - sketch out the ideas!!!


4d) Asking for “What” Instead of Telling “How” 69
"Trip" asks for 'WHAT' and "Mechanic" knows how to get it.
"Trip" can trust "Mechanic" - but does it?


4e) Seeking Context Independence 71
Dependency injection - how can "Trip" invoke the correct behavior from "Mechanic"
without knowing what "Mechanic" does?
What a "Trip" wants vs How that gets prepared ("Mechanic")
***(I'm a little confused here regarding the use of "self")


4f) Trusting Other Objects 73
Figures 4.5, 4.6 and 4.7 demonstrate increasing object-oriented code.
f4.5 is procedural
    Trip to Mech: "I know what I want and I know how you do it."
f4.6 is more OO
    Trip to Mech: "I know what I want and I know what you do"
f4.7 much more OO
    Trip to Mech: "I know what I want and I trust you to do your part."
***(it would really help to see coded examples instead of UML) :(
f4.7 = blind trust - KEYSTONE of object-oriented design.
This allows COLLABORATION without BINDING


4g) Using Messages to Discover Objects 74
Distinction between Asking For WHAT and Telling HOW
Importance of CONTEXT and TRUST.
f4.3 is a literal translation of the USE CASE (and "Trip" knows too much)
f4.4 first attempt at moving responsibility away from "Trip" placed too much
responsibility on "Customer" ("Customer" knows too much, tells others how to behave,
and requires too much context.)
Still need to identify WHOSE responsibility it is to deal with "Customer" message.
"suitable_trips" becomes a PUBLIC interface METHOD at the intersection of
"Customer", "Trip" and "Bicycle" - we'll use a "TripFinder" class to find
"suitable_trips" while keeping the implementation PRIVATE.


4h) Creating a Message-Based Application 76
UML is a temp tool.
Keep the focus on messages and build upon the public interfaces.



5) Writing Code That Puts Its Best (Inter)Face Forward 76
A "WELL-DEFINED" interface is a better goal than a "perfect" interface


5a) Create Explicit Interfaces 76
Every time you create a class, DECLARE its InTERFACES.
Methods in the PUBLIC interfaces should
1) Be explicitly identified as such
2) Be more about WHAT than HOW
3) Have names that won't change (as best as you can anticipate)
4) TAKE A HASH AS AN OPTIONS PARAMETER.
Ruby provides three relevant keywords: public, protected, and private.
Use of these keywords serves two distinct purposes.
First, they indicate which methods are stable and which are unstable.
Second, they control how visible a method is to other parts of your application.
Conveying information that a method is stable or unstable is one thing;
attempting to control how others use it is quite another
Guidelines more than rules.

5a.1) Public, Protected, and Private Keywords
Private - least stable, most restricted; implicit - never explicitly called
Protected - unstable; allow explicit calls with self or sub-class of self.
*** Code examples would really help here :(
Public - stable and visible everywhere.


5b) Honor the Public Interfaces of Others 78
A dependency on a private method of an external framework
is a form of technical debt. Avoid these dependencies.


5c) Exercise Caution When Depending on Private Interfaces 79
Even if you cannot avoid using a private method, you can prevent the
method from being referenced in many places in your application.
Depending on a private interface increases risk; keep this risk to a
minimum by isolating the dependency


5d) Minimize Context 79
Construct public interfaces with an eye toward minimizing the
context they require from others



6) The Law of Demeter 80
https://en.wikipedia.org/wiki/Law_of_Demeter
"Only talk with your immediate friends"
(Q: "How do you keep a secret between three people?"
A: "Kill the other two...") ;)


6a) Defining Demeter 80
https://en.wikipedia.org/wiki/Demeter
Ruby i.e. "use only one dot"
chains of dotted methods are TRAIN-WRECKS


6b) Consequences of Violations 80
More of a MAXIM than a LAW.
Recall Ch2: T.R.U.E.
Transparent: distant methods calls aren't transparent
Reasonable: raising the cost of change is unreasonable
Usable: requiring too much context is not easily useable
Exemplary: train-wrecks breeding train-wrecks is not exemplary
There are exceptions and compromises, e.g. hash.keys.sort.join(', ') passes a type check:
hash.keys returns an ENUMERABLE
hash.keys.sort also returns an ENUMERABLE
hash.keys.sort.join returns a STRING
This is only a SLIGHT DEMETER violation as the TRAIN-WRECK actually returns
an ENUMERABLE OF STRINGS and ALL intermediate objects have the same TYPE.
Removing the dots from this kind of code might RAISE costs.


6c) Avoiding Violations 82
DELEGATE a messgae - pass it on to another object, often via a WRAPPER.
The WRAPPER method ENCAPSULATES, or hides, knowledge otherwise embodied in the msg chain.
***delegate.rb and forwardable.rb (Rails delegate method) allow an object to
automatically intercept a message sent to self and send it elsewhere... HMMM?
Take care with this - it is the letter of the law, sometimes not the spirit.


6d) Listening to Demeter 82
THE MESSAGE HERE IS NOT: 'use more delegation'.
THE MESSAGE OF DEMETER IS "EFFECTIVE DECOUPLING" "Ask for WHAT you want, not HOW you
want it delivered."
?
"The train wrecks of Demeter violations are clues that there are objects whose
public interfaces are lacking.
Listening to Demeter means paying attention to your point of view.
If you shift to a message-based perspective, the messages you find will become
public interfaces in the objects they lead you to discover.
However, if you are bound by the shackles of existing domain objects, you’ll
end up assembling their existing public interfaces into long message chains
and thus will miss the opportunity to find and construct flexible public interfaces."


7) Summary 83
    "Object-oriented applications are defined by the messages that pass
between objects. This message passing takes place along “public” interfaces;
well-defined public interfaces consist of stable methods that expose the
responsibilities of their underlying classes and provide maximal benefit
at minimal cost.
    Focusing on messages reveals objects that might otherwise be overlooked.
When messages are trusting and ask for what the sender wants instead of
telling the receiver how to behave, objects naturally evolve public interfaces
that are flexible and reusable in novel and unexpected ways."




