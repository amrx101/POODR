http://pdf.th7.cn/down/files/1502/Practical%20Object-Oriented%20Design%20in%20Ruby.pdf
CHAPTER 7
Sharing Role Behavior with Modules


1) Sharing Role Behavior with Modules 141
Inheritance is great, but: How to combine the qualities of two existing SUBclasses?
We can use the techniques of inheritance to share a ROLE. We can use a Ruby module
to define a common role from which to write inheritable code.



2) Understanding Roles 142
(I loathe Metz's use of "orthogonal" here.)
Some problems require sharing behavior among otherwise unrelated objects.
This common behavior is a ROLE an object plays and is not as obvious a
relationship as SUBclass < SUPERclass.
CAVEAT: Using ROLES can create dependencies among the involved objects which will
introduce risks to design options.


2a) Finding Roles 142



2b) Organizing Responsibilities 143


2c) Removing Unnecessary Dependencies 145

2c.1) Discovering the Schedulable Duck Type
2c.2) Letting Objects Speak for Themselves

2d) Writing the Concrete Code 147


2e) Extracting the Abstraction 150


2f) Looking Up Methods 154
2f.1) A Gross Oversimplification
2f.2) A More Accurate Explanation
2f.3) A Very Nearly Complete Explanation


2g) Inheriting Role Behavior 158



3) Writing Inheritable Code 158


3a) Recognize the Antipatterns 158


3b) Insist on the Abstraction 159


3c) Honor the Contract 159


3d) Use the Template Method Pattern 160


3e) Preemptively Decouple Classes 161


3f) Create Shallow Hierarchies 161



4) Summary 162


