http://pdf.th7.cn/down/files/1502/Practical%20Object-Oriented%20Design%20in%20Ruby.pdf
CHAPTER 7
Sharing Role Behavior with Modules


1) Sharing Role Behavior with Modules 141
Inheritance is great, but: How to combine the qualities of two existing SUBclasses?
We can use the techniques of inheritance to share a ROLE. We can use a Ruby module
to define a common role from which to write inheritable code.



2) Understanding Roles 142
(I loathe Metz's use of "orthogonal" here.)
Some problems require sharing behavior among otherwise unrelated objects.
This common behavior is a ROLE an object plays and is not as obvious a
relationship as SUBclass < SUPERclass.
CAVEAT: Using ROLES can create dependencies among the involved objects which will
introduce risks to design options.


2a) Finding Roles 142
see Duck Types (ch5)
MODULES: a named group of methods which are independent of class AND
         can be mixed in to ANY object
From the POV of the object, it is like CLASSical inheritance
The total set of messages to which an object can respond includes
• Those it implements
• Those implemented in all objects above it in the hierarchy
• Those implemented in any module that has been added to it
• Those implemented in all modules added to any object above it in the hierarchy


2b) Organizing Responsibilities 143
(see 7a.rb)
"Instead of knowing details about other classes, the Schedule should send them messages..."


2c) Removing Unnecessary Dependencies 145
"...which in turn should be sent to each incoming object."


2c.1) Discovering the Schedulable Duck Type 146
"This change replaces an if
statement that checks the class of an object with a message sent to that same object."


2c.2) Letting Objects Speak for Themselves 147
"... objects should manage
themselves; they should contain their own behavior. If your interest is in object B, you
should not be forced to know about object A if your only use of it is to find things out
about B."


2d) Writing the Concrete Code 147
(see 7a.rb and 7b.rb)
"This code hides knowledge of who the Schedule is and what the Schedule does
inside of Bicycle. Objects holding onto a Bicycle no longer need know about the
existence or behavior of the Schedule."


2e) Extracting the Abstraction 150
(see 7c.rb)
"The code in Schedulable is the abstraction and it uses the template method pattern
to invite objects to provide specializations to the algorithm it supplies."
"... a distinction between classical inheritance
and sharing code via modules. This is-a versus behaves-like-a difference definitely
matters, each choice has distinct consequences."


2f) Looking Up Methods 154
"Understanding the similarities between classical inheritance and module inclusion is
easier if you understand how object-oriented languages, in general, and Ruby, in
particular, find the method implementation that matches a message send. "


2f.1) A Gross Oversimplification 154
If a search for a call to a method from a subclass is found in neither the sub or superclass
..."Ruby gives the original receiver a second chance by sending it a new message,
method_missing, and passing (the method called) as an argument. Attempts to resolve this
new message restart the search along the same path, except now the search is for
method_missing rather than (the method called)"


2f.2) A More Accurate Explanation 155
LOOKUP PATH:
Instance > subclass > superclass > included modules > ObjectClass
NOTE: Sub and Superclass method of the same name will override those of Modeuls
Messages from Modules to super and sub classes that don't have methods to deal with them
will create confusing failures.


2f.3) A Very Nearly Complete Explanation 156
"When a single class includes several different modules,
the modules are placed in the method lookup path in REVERSE ORDER of module inclusion.
Thus, the methods of the last included module are encountered first in the
LOOKUP PATH."
NOTE: In addition to Rubys keyword "include" which includes module methods in classes
NOTE: The Ruby keyword "extend" will extend an instace of a class with the modules methods
LOOKUP PATH:
Instance methods > instance EXTENSIONS > subclass methods > subclass INCLUSION >>
          >>  superclass methods > superclass INCLUSIONS > ObjectClass methods


2g) Inheriting Role Behavior 158
"Now that you’ve seen how to define a role’s shared code in a module and how a module’s
code gets inserted into the method lookup path, you are equipped to write some
truly frightening code"



3) Writing Inheritable Code 158
"The usefulness and maintainability of inheritance hierarchies and modules is in direct
proportion to the quality of the code. More so than with other design strategies, sharing
inherited behavior requires very specific coding techniques, which are covered in the
following sections."


3a) Recognize the Antipatterns 158
"There are two antipatterns that indicate that your code might benefit from inheritance.
First, an object that uses a variable with a name like type or category to
determine what message to send to self contains two highly related but slightly
different types. This is a maintenance nightmare; the code must change every time a
new type is added. "
"Second, when a sending object checks the class of a receiving object to determine
what message to send, you have overlooked a duck type. This is another maintenance
nightmare"
"In addition to sharing an interface, duck types might also share behavior. When
they do, place the shared code in a module and include that module in each class or
object that plays the role."


3b) Insist on the Abstraction 159
"All of the code in an abstract superclass should apply to every class that inherits it.
Superclasses should not contain code that applies to some, but not all, subclasses.
This restriction also applies to modules: the code in a module must apply to all
who use it. "
"If you cannot correctly identify the abstraction there may not be one, and if no
common abstraction exists then inheritance is not the solution to your design
problem."


3c) Honor the Contract 159
"Subclasses agree to a contract; they promise to be substitutable for their superclasses."


3c.1) LISKOV SUBSTITUTION PRINCIPLE (LSP) 160
"When you honor the contract, you are following the Liskov Substitution
Principle, which is named for its creator, Barbara Liskov, and supplies the “L”
in the SOLID design principles.
    Her principle states:
        Let q(x) be a property provable about objects x of type T. Then q(y)
        should be true for objects y of type S where S is a subtype of T.
Mathematicians will instantly comprehend this statement; everyone else
should understand it to say that in order for a type system to be sane, subtypes
must be substitutable for their supertypes.
Following this principle creates applications where a subclass can be used
anywhere its superclass would do, and where objects that include modules
can be trusted to interchangeably play the module’s role.


3d) Use the Template Method Pattern 160
"The fundamental coding technique for creating inheritable code is the template
method pattern. This pattern is what allows you to separate the abstract from the concrete.
The abstract code defines the algorithms and the concrete inheritors of that abstraction
contribute specializations by overriding these template methods.
    The template methods represent the parts of the algorithm that vary and
creating them forces you to make explicit decisions about what varies and what
does not."


3e) Preemptively Decouple Classes 161
"Avoid writing code that requires its inheritors to send super;
instead use HOOK messages to allow subclasses to participate while
absolving them of responsibility for knowing the abstract algorithm."
NOTE: "HOOK methods solve the problem of sending super, but, unfortunately,
       only for adjacent levels of the hierarchy"


3f) Create Shallow Hierarchies 161
"The limitations of hook methods are just one of the many reasons to create shallow
hierarchies."


4) Summary 162
"When objects that play a common role need to share behavior, they do so via a Ruby
module. The code defined in a module can be added to any object, be it an instance
of a class, a class itself, or another module.
    When a class includes a module, the methods in that module get put into the same
lookup path as methods acquired via inheritance. Because module methods and inherited
methods interleave in the lookup path, the coding techniques for modules mirror
those of inheritance. Modules, therefore, should use the template method pattern to
invite those that include them to supply specializations, and should implement hook
methods to avoid forcing includers to send super (and thus know the algorithm).
    When an object acquires behavior that was defined elsewhere, regardless of
whether this elsewhere is a superclass or an included module, the acquiring object
makes a commitment to honoring an implied contract. This contract is defined by the
Liskov Substitution Principle, which in mathematical terms says that a subtype should
be substitutable for its supertype, and in Ruby terms this means that an object should
act like what it claims to be."


