http://pdf.th7.cn/down/files/1502/Practical%20Object-Oriented%20Design%20in%20Ruby.pdf
CHAPTER 3
Managing Dependencies


1) Managing Dependencies
a) actions a class object implements (see Ch. 2)
b) actions a class object inherits (see Ch. 6)
c) actions a class objects dependes on another class object for
Getting access to behavior when that behavior is implemented by OTHER objects
Collaboration - because well designed objects have a single responsibility,
they require collaboration



2) Understanding Dependencies 36
(see ch3a.rb)
"Gear" has at least four dependencies upon "Wheel"


2a) Recognizing Dependencies 37
An object has a dependency when it knows
1) The name of another class
    e.g. "Gear" expects a class named "Wheel" to exist
2) The name of a message that it intends to send to someone other than "self"
    e.g. "Gear" expects a "Wheel" instance to respond to "diameter"
3) The arguments that a message requires
    e.g. "Gear" knows that "Wheel.new" requires a "rim" and a "tire"
4) The order of those arguments
    e.g. "Gear" knows the first argument to "Wheel.new" should be "rim" and the second, "tire".
Gear will likely need to be changed (at least checked/tested) whenever Wheel changes
A class should know just enough to do its job and nothing more.


2b) Coupling Between Objects (CBO) 37
The above dependencies "COUPLE" Gear to Wheel, i.e. coupling creates a dependency.
This makes it difficult to reuse code elsewhere.


2c) Other Dependencies 38
1) Chaining messages together (magnified version of ch3-2a-2) above)
Changing any of the intermediate objects might require the first object to change.
A violation of: The Law of Demeter (see ch.4)
https://en.wikipedia.org/wiki/Law_of_Demeter
"Principle of least knowledge"
2) Testing code (see Ch. 9)
Test-to-code over-coupling has the same consequence of code-to-code over-coupling



3) Writing Loosely Coupled Code 39
Recognize dependencies and remove the unecessary ones.


3a) Inject Dependencies 39
Referring to a class by its name is a MAJOR dependency (Ch3-2a-1)
(see ch3b.rb)
If the "Wheel" class name changes, that's a minor fix
Line 20 (the gear_inches method) is a problem because it requires Wheel class for diameter
and it requires Wheel initialized with rim & tire, but it only needs the diameter.
(see ch3c.rb)
The two classes are now decoupled (but invoking them requires a more verbose call?)
Instead of the explicit dependency, now just dependent upon diameter method.
Gear is smarter cuz it knows less: just because gear needs to send diameter, it does
not need to know Wheel.


3b) Isolate Dependencies 42
Reduce unnecesaary dependencies so that they are
easy to spot and reduce when circumstances permit.


3b.1) Isolate Instance Creation 42
if unable to remove dependency entirely, isolate the creation of the dependency instance
Explicitly expose the dependency while reducing its reach into your class.
(see ch3d.rb)
In both examples "Gear" know too much about "Wheel" but the dependencies have been reduced
and the dependencies on "Wheel" are PUBLICLY EXPOSED (revealed, not concealed)


3b.2) Isolate Vulnerable External Messages 44
Now, focues on "Messages that are sent to someone other than self"
(see ch3e.rb)
REMOVE the external dependency from the method and ENCAPSULATE the dependency
in its own method - easier to manage
The "gear_inches" method now depends on a message "Gear" send to "self"



4) Remove Argument-Order Dependencies 46
Methods requiring arguments in a specific, fixed order
(see ch3f.rb)


4.1) Using Hashes for Initialization Arguments 46
(see ch3g.rb)
Hashing adds verbosity, but it is worth it for the benefits of not being
dependent upon the specific order of arguments, but NOTE we do gain a
dependency upon the names of the KEYS in the HASH (This is a healthy and
stabilizing change - key names document the arguments)


4.2) Explicitly Define Defaults 48
Using Ruby's || method - a.k.a. "CONDITIONAL ASSIGNEMNT"
http://stackoverflow.com/questions/4500375/double-pipe-symbols-in-ruby-variable-assignment
https://en.wikibooks.org/wiki/Ruby_Programming/Syntax/Operators#1._Assignment
(see ch3h.rb)
Fetching
(see ch3i.rb)
Merging Hashes
(see ch3j.rb)


4.3) Isolate Multiparameter Initialization 49
implementing a defaults method
single method to wrap an external interface; wrapping method to isolate external dependencies
Use modules to create objects of some other class: FACTORIES
(see ch3k.rb)


5) Managing Dependency Direction 51
Dependencies have a direction. Decide which way it flows.


5a) Reversing Dependencies 51
(see ch3l.rb)
An insignificant change here, but it affects future flexibility


5b) Choosing Dependency Direction 53
1) some classes are more likely than others to have changes in requirements
2) Concrete classes are more likely to change than abstract classes
3) Changing a class that has many dependencies will result in widespread consequences


5b.1) Understanding Likelihood of Change
the "* method?" I think she means "operator" e.g. 2.5.send(:*, 3.5) ==> 8.75
Likely base Ruby classes will change less often than framework classes
...which will hopefully change less often than your classes
Likelihood of change is something to consider when choosing the direction of dependencies


5b.2) Recognizing Concretions and Abstractions
Abstraction vs. Concretion
Unlike a static "type" language, it's easy to make abstract classes without
realizing you are doing so because unlike statis-typed languages, the abstractions
don't need to be explicitly declared.
Abstractions tend to be more stable.
I'm not so clear on how Metz is using "interface" and "class"


5b.3) Avoiding Dependent-Laden Classes
A class that, if changed, will cause changes to ripple through
the application, will be under enormous pressure to never change. Ever.


5b.4) Finding the Dependencies That Matter
Likelihood of change (less to more) vs. number of dependents (few to many)
-----------------------------------------------------|
Many  |  *ABSTRACT ZONE*  |   *DANGER ZONE*          |
^-----|-------------------|--------------------------|
^     |                   |                          |
^     |   Changes are     | These WILL change        |
^     |   unlikely, but   | and changes will         |
^     |   w/broad effects | cascade into dependencies|
^-----|----------------------------------------------|
^     |   Changes are     | Changes are likely       |
^     |   unlikely, but   | but they will have       |
^     |   w/few side fx   | few side effects         |
^     |                   |                          |
^-----|-------------------|--------------------------|
Few   |  *NEUTRAL ZONE*   |   *NEUTRAL ZONE*         |
------|Less >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> More |
-----------------------------------------------------|
Depend on things that change less often than you do is a heuristic(sic - this is a maxim) that stands in for
all the ideas in this section. The zones are a useful way to organize your thoughts but
in the fog of development it may not be obvious which classes go where. Very often
you are exploring your way to a design and at any given moment the future is unclear.
Following this simple rule of thumb at every opportunity will cause your application
to evolve a healthy design.



6) Summary 57
Dependency management is core to creating future-proof applications. Injecting
dependencies creates loosely coupled objects that can be reused in novel ways.
Isolating dependencies allows objects to quickly adapt to unexpected changes.
Depending on abstractions decreases the likelihood of facing these changes.
The key to managing dependencies is to control their direction. The road to
maintenance nirvana is paved with classes that depend on things that change less
often than they do.



